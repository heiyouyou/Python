一、创建项目
初始化一个django项目的命令：
django-admin startproject mysite(项目名称)

二、运行项目
python manage.py runserver 
默认在 127.0.0.1:8000 地址下运行
可以通过 python manage.py runserver 8080 改变访问的端口

三、创建应用程序(App)
确保应用程序与manage.py 同一目录下
python manage.py startapp polls(应用名) 
然后在setting.py文件中的INSTALLED_APPS配置进行注册应用

四、初始化应用的Model
python manage.py makemigrations polls
注意：每次创建一个新的model都要运行该条命令
会在应用的migrationsm目录下创建出以数字开头的.py文件

五、迁移应用的Model成对应的sql语句
python manage.py sqlmigrate polls(应用名) 0001(xxxx_initial.py的序号)
该步骤并不是必须的，只是用来格式化xxxx_initial.py中的程序成对应的sql语句

六、迁移应用的Model对应到数据库中的表
python manage.py migrate
注意：每次创建一个新的model都要运行该条命令，往数据库中创建表

七、在命令行窗口进行数据库增删查改操作
第一步先进入项目的命令窗口控制台：
python manage.py shell
第二步就是导入相关db的操作包，进行db的增删查改

八、使用Django内置的管理系统进行创建用户和登录系统
创建用户：python manage.py createsuperuser
登录地址：http://127.0.0.1:8000/admin/

九、解决Django框架中文显示和输入的问题
显示：
在settings.py文件中更改配置LANGUAGE_CODE成'zh-Hans',和MIDDLEWARE_CLASSES增加'django.middleware.locale.LocaleMiddleware'模块既可以在admin管理界面显示中文

输入：
1.用__unicode__函数代替__str__
	原先写的模型代码中的方法用提　def __str__(self): 这个是旧版本中用的方法，在Django　0.96以后的版本中，应该换成
	def __unicode__(self):
	这样就解决了字符串传递时出错的问题，统一编码为Unicode字符串。
	class FatherMenu(models.Model):
	    ···
	    def __unicode__(self):
	        return self.title
2.使用sefdefaultencoding函数
	# _*_ coding:utf-8 _*_
	from __future__ import unicode_literals
	from django.db import models
	from django.core.urlresolvers import reverse 
	# Create your models here.

	import sys
	reload(sys)
	sys.setdefaultencoding('utf-8')

	class FatherMenu(models.Model):
		pass

十、Django处理响应和视图模板的问题
1、一定要用return语句返回响应头对象HttpResponse()
2、视图文件（即是html文件）一定要放在新建的templates文件夹中，不管子目录有多少
4、视图文件存放在对应应用目录下的templates文件夹中，并且只能改app应用可见
5、如果是直接在工程下创建templates目录，则该目录下的所有视图文件对于所有的应用可见，同时需要在setting.py文件中配置TEMPLATES>>DIRS选项为：[os.path.join(BASE_DIR,'templates')]，这样所有应用方可访问这个目录下的视图文件（注意不是配置TMEPLATE_DIRS）
6、可以使用{% url url名称 参数 %}进行配置a链接的跳转地址，达到高度耦合可维护性（参考urls.py中的url映射），其中参数项可以省略。
注意：当对urls.py配置了app_name时，必须通过命名空间访问，否则将报错

十一、Django处理表单提交数据、ajax提交数据
1、进行表单提交数据时需要在form表单内使用{% csrf_token %}指令方可解决post提交数据跨域的问题。
2、reverse(viename,kwargs=None)与视图模板中的{% url %}指令是相同的效果，都是用于格式化url路劲。
3、vote{{某个字段值|pluralize}}对指令之前的字符(vote)进行复数变化处理
4、针对两种类型的页面：列表形式的大量数据页面和具体某个数据的详细页面可以使用ListView和DetailView这两个generic类进行对视图函数重写成类，以类的形式进行书写相关逻辑。
5、针对视图函数中的Http请求方式限制，可以采用装饰器的机制达到，如：
	1.@require_http_methods(["GET","POST"])（只能是允许get或者post请求访问该视图）
	2.@require_GET（只允许get请求）
	3.@require_POST（只允许post请求）

	@require_http_methods(["GET","POST"])
		def test(request):
			return render(request,'testdb/test.html',context={"data":'this is get test html...'})

	@require_GET
	def data(request):
		return render(request,'testdb/data.html',context={"data":'this is post test html...'})

	@require_POST
	def data2(request):
		return HttpResponse('this is post request data...')
	注意后面两个装饰器不需要传参，不用括号

6、针对ajax的post提交，由于Django的安全机制，正常是无法提交数据的，需要在提交参数时，
添加'csrfmiddlewaretoken': '{{ csrf_token }}'参数就是token的值，但是代码不能写在js文件中，也可以通过js获取浏览器cookie中的csrf_token值，可以写在js文件中，另一种解决方案（针对JQuery的Ajax）：
	方案一、
	$(document).ajaxSend(function(event, xhr, settings) {  
	    function getCookie(name) {  
	        var cookieValue = null;  
	        if (document.cookie && document.cookie != '') {  
	            var cookies = document.cookie.split(';');  
	            for (var i = 0; i < cookies.length; i++) {  
	                var cookie = jQuery.trim(cookies[i]);  
	                // Does this cookie string begin with the name we want?  
	                if (cookie.substring(0, name.length + 1) == (name + '=')) {  
	                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));  
	                    break;  
	                }  
	            }  
	        }  
	        return cookieValue;  
	    }  

	    function sameOrigin(url) {  
	        // url could be relative or scheme relative or absolute  
	        var host = document.location.host; // host + port  
	        var protocol = document.location.protocol;  
	        var sr_origin = '//' + host;  
	        var origin = protocol + sr_origin;  
	        // Allow absolute or scheme relative URLs to same origin  
	        return (url == origin || url.slice(0, origin.length + 1) == origin + '/') ||  
	            (url == sr_origin || url.slice(0, sr_origin.length + 1) == sr_origin + '/') ||  
	            // or any other URL that isn't scheme relative or absolute i.e relative.  
	            !(/^(\/\/|http:|https:).*/.test(url));  
	    }  

	    function safeMethod(method) {  
	        return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));  
	    }  
	 
	    if (!safeMethod(settings.type) && sameOrigin(settings.url)) {  
	        xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));  
	    }  
	});  
	方案二、
	function getCookie(name) {
    var cookieValue = null;
    if (document.cookie && document.cookie != '') {
	        var cookies = document.cookie.split(';');
	        for (var i = 0; i < cookies.length; i++) {
	            var cookie = jQuery.trim(cookies[i]);
	            // Does this cookie string begin with the name we want?
	            if (cookie.substring(0, name.length + 1) == (name + '=')) {
	                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
	                break;
	            }
	        }
	    }
	    return cookieValue;
	}
	function csrfSafeMethod(method) {
	    // these HTTP methods do not require CSRF protection
	    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
	}

	$.ajaxSetup({
	    beforeSend: function(xhr, settings) {
	    var csrftoken = getCookie('csrftoken');     
	    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
	            xhr.setRequestHeader("X-CSRFToken", csrftoken);
	        }
	    }
	});
	以上两种方案都是针对ajax的post请求的请求头设置属性X-CSRFToken的值。


十二、Django的自动化测试机制
第一步：在tests.py文件中创建继承了django.test.TestCase类的子类
第二步：在子类中创建以test开头的方法进行测试用例
第三步：使用self.client.get(path)模拟客户端请求服务端，进行相关功能测试
第三步：运行命令行，python manage.py test polls(某个应用名)，会自动创建一个临时数据库进行测试
注意：
1、一个测试类对应一个模型或者视图
2、每一个测试方法对应着一个测试条件
3、测试方法的命名尽可能语义化

十三、Django对于静态资源的处理
1、在应用目录创建一个static静态资源目录
2、为了区别其他应用的同名静态资源，故需要在static目录中以应用名为子目录进行命名空间的创建
3、在模板视图中需要通过 {% load staticfiles %}加载静态资源的处理指令{% static 'polls/css/style.css' %}，也可以使用普通的url路径'/static/polls/images/test.jpg'来访问静态资源（不建议这种方式）。
4、在浏览器地址栏访问静态资源的格式如：http://127.0.0.1:8000/static/polls/css/style.css。
5、可以在setting.py中对STATIC_URL选项进行配置静态资源的起始路径。

十四、Django自定义定制管理内置的admin网站的布局和样式
1、可以在amdin.py文件中自定义一个继承了admin.ModelAdmin类的子类，通过字段fields或者fieldsets进行配置对应Model的显示顺序或者内容。
2、可以在子类中通过一些重写父类的一些属性配置，达到定制化管理网站的目的，如：
list_display、search_fields、list_filter、inlines

十五、中间件的配置和注册 
示例如下：
# 处理请求中间件（拦截登录）
class Request_Middleware(object):
	def process_request(self,request):
		print 'process_request...'
		print request.path
		path = request.path
		# print request.COOKIES
		# 排除登录页面的拦截
		if 'sessionid' in request.COOKIES or path == '/admin/login/':
			return None
		else:
			return HttpResponseRedirect('/admin/login/')

# 处理视图中间件
class View_Middleware(object):
	def process_view(self,request,view_func,view_args,view_kwargs):
		print 'process_view...'
		return None

# 处理异常中间件
class Exception_Middleware(object):
	def process_exception(request,exception):
		print 'process_exception...'
		return None

# 处理响应中间件
class Response_Middleware(object):
	def process_response(request,response):
		print 'process_response...'

主要根据需要的不同实现不同类型中间件的接口方法，需要在setting.py文件的MIDDLEWARE_CLASSES配置项进行注册，即是所有中间件类都要在这里注册.
	注意：
	1、任何请求都会经过请求中间件，但是静态资源的请求除外。
	2、请求通过，需要return None，继续往下执行其他中间件，请求不通过，return HttpResponse ，往下的中间件终止执行。
	3、Django是如何做到已经加载过的静态资源在不清除缓存的情况下，刷新页面不会重新请求的？？？